using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using static MvvmApp.Generators.NotifyGenerator;

namespace MvvmApp.Generators;

public static class SourceHelper
{
  public const string AttributeNamespace = "Prism.Avalonia.Toolkit";

  public const string NotifyFieldAttribute = "NotifyFieldAttribute";

  public const string NotifyFieldAttributeClass = $@"
// <auto-generated />
using System;
namespace {AttributeNamespace}
{{
    [AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)]
    [System.Diagnostics.Conditional(""NotifyFieldGenerator_DEBUG"")]
    sealed class {NotifyFieldAttribute} : Attribute
    {{
        public {NotifyFieldAttribute}()
        {{
        }}

        public string PropertyName {{ get; set; }}
    }}
}}
";

  public const string NotifyFieldAttributeFullNamespace = $"{AttributeNamespace}.{NotifyFieldAttribute}";

  public const string NotifyPropertyChangedNamespace = "System.ComponentModel.INotifyPropertyChanged";

  ////private string GenerateClass(INamedTypeSymbol classSymbol, List<IFieldSymbol> fieldSymbols, INamedTypeSymbol? attributeSymbol, INamedTypeSymbol? notifySymbol)
  public static string? GeneratePropertyClass(INamedTypeSymbol classSymbol, List<IFieldSymbol> fieldSymbols, ISymbol? attributeSymbol, ISymbol? notifySymbol)
  {
    if (!classSymbol.ContainingSymbol.Equals(classSymbol.ContainingNamespace, SymbolEqualityComparer.Default))
    {
      // TODO: Send Diagnostic that it must be top-level.
      return null;
    }

    string srcNamespace = classSymbol.ContainingNamespace.ToDisplayString();

    StringBuilder src = new($@"
// <auto-generated />
namespace {srcNamespace}
{{
  //// public partial class {classSymbol.Name} : {notifySymbol.ToDisplayString()}
  public partial class {classSymbol.Name} : Prism.Mvvm.BindableBase
  {{
");

    // Add the `event PropertyChangedEventHandler`  if it doesn't already
    ////if (!classSymbol.Interfaces.Contains(notifySymbol, SymbolEqualityComparer.Default))
    ////  src.Append("    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;");

    foreach (IFieldSymbol fieldSymbol in fieldSymbols)
      ProcessField(src, fieldSymbol, attributeSymbol);

    src.AppendLine("  }");
    src.AppendLine("}");

    return src.ToString();
  }

  private static void ProcessField(StringBuilder source, IFieldSymbol fieldSymbol, ISymbol attributeSymbol)
  {
    const string PropertyName = "PropertyName";

    // Get name and type of the field
    string fieldName = fieldSymbol.Name;
    ITypeSymbol fieldType = fieldSymbol.Type;

    // Get Notifiable attribute from the field and associated data
    AttributeData attributeData = fieldSymbol
      .GetAttributes()
      .Single(ad => ad.AttributeClass.Equals(attributeSymbol, SymbolEqualityComparer.Default));

    TypedConstant optionalNameOverride = attributeData.NamedArguments.SingleOrDefault(kvp => kvp.Key == PropertyName).Value;

    // Report diagnostic issues if we can't process the field.
    string propertyName = ExtractName(fieldName, optionalNameOverride);
    if (propertyName.Length == 0 || propertyName == fieldName)
    {
      // TODO: Send diagnostic issue that we can't process the file.
      return;
    }

    // Since we're using Prism library
    source.Append($@"
    public {fieldType} {propertyName} {{ get => this.{fieldName}; set => SetProperty(ref this.{fieldName}, value); }}
");

    /*
    source.Append($@"
    public {fieldType} {propertyName}
    {{
      get => this.{fieldName};
      set
      {{
          SetProperty(ref this.{fieldName}, value);
          ////this.{fieldName} = value;
          ////this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(nameof({propertyName})));
      }}
    }}
");
     */

    // Extract the new Property's name from the field
    string ExtractName(string fieldName, TypedConstant optionalNameOverride)
    {
      const char Underscore = '_';

      if (!optionalNameOverride.IsNull)
        return optionalNameOverride.Value.ToString();

      // Remove leading underscore
      fieldName = fieldName.TrimStart(Underscore);
      if (fieldName.Length == 0)
        return string.Empty;

      if (fieldName.Length == 1)
        return fieldName.ToUpper();

      //// return fieldName.Substring(0, 1).ToUpper() + fieldName.Substring(1);
      return string.Concat(fieldName[..1].ToUpper(), fieldName.AsSpan(1));
    }
  }
}
